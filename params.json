{"name":"InformaT","tagline":"Software de información y concienciación sobre la importancia de la participación política.","body":"### **<><> CHANGELOG DIA 29/12/2014 <><>**\r\n\r\nHe generado por fin el javadoc, sólo falta rellenar con explicaciones, las cuales he sacado de los códigos fuente de la aplicación.\r\n\r\nIgual en Changelogs anteriores me se había subido el optimismo a la cabeza acerca de cómo de listas estaba las clases que conformaban el sistema mvc, pues hoy mismo he tenido que arreglar la encapsulación y la clase de eventos del mismo, así que ahora sí que la veo lista para ir al siguiente nivel, y el que más me aterroriza y apasiona: el diseño.\r\n\r\n¿Porqué me aterroriza si me gusta tanto? Porque para hacer esta aplicación digna del concurso al que la presento no sólo tengo ahora que realizar el trabajo técnico de las planeadas tres personas, sino el creativo; convertir en un éxito una aplicación de un tema del que el 50% 70% de mis usuarios huye. Mis mayores enfoques han sido estos programas:\r\n\r\nhttp://www.rtve.es/noticias/elecciones/generales/programas-electorales/\r\nhttp://lab.rtve.es/noticias/resumen-programas/index.html\r\n\r\nY éste otro:\r\n\r\nhttp://www.elecciones.es/\r\n\r\nY aparte de una tarea de centralización, hay que innovar. Hay que centrarse en la teoría de los grupos sociales que representan colectivos, y \"disfrazar\" la app como una especie de red social, y personalizar al máximo, y de la manera más anónima posible, los eventos al gusto del usuario, lo que implicaría ir de puntillas en la línea de la ley de protección de datos. \r\n\r\nDesde el primer momento supe que esto iba a ser un reto profesional y personal, así que sin más dilación me pondré con un diseño cuya descripción merezca otro changelog.\r\n\r\n### **<><> CHANGELOG DIA 26/12/2014 <><>**\r\n\r\nLos eventos están empezando a encajar como un puzzle ahora que he definido bien las funciones de cada modelo. Sólo me falta definir el comportamiento de las clases principales del MVC ante la llegada de un evento, de modo que el Controlador haga el desglose adecuado del ActionCommand para recibir adecuadamente la vista en la que se ha efectuado el evento de Swing, luego cuando recoja el evento de registro de la vista obtenga sus componentes y los registre para escuchar esos eventos de Swing.\r\n\r\nEl modelo recibirá la vista y la acción y ejecturará una búsqueda de árbol descendente hasta localizar el evento origen de la vista, en el cual una vez se hayan hecho las operaciones oportunas con la base de datos XML, se parsearán las modificaciones a un array de String y se enviará junto con el identificador del modelo a la vista principal, la cual hará el mismo tipo de búsqueda y con el String y algunos flags en cada String indicando si el elemento es nuevo o reemplaza a a otro, se actualizará la vista, y enviará los nuevos elementos que se hayan podido crear al actionlistener del controlador.\r\n\r\nUna vez implementado eso, considero que el MVC está listo para construir las clases características de la aplicación.\r\n\r\n### **<><> CHANGELOG DIA 24/12/2014 <><>**\r\n\r\nTras unos días de aburrimiento, finalmente me he animado a tocar la parte de los eventos; me he cargado toda la herencia de los eventos. Motivo: en un principio pensaba que, por razones de peso, almacenar únicamente los datos a enviar en el evento mejoraría la eficiencia. \r\n\r\nPero después de una observación de la clase EventObject, me he dado cuenta de que todos los eventos de Java se crean con el objeto emisor, y mediante el método getSource() se establecía un \"puente lógico\" entre los objetos que permitía al receptor obtener toda la información que necesite del emisor.\r\n\r\nPensado en esto, he modificado el método agregarEmisor() y lo he establecido como constructor, ya que no voy a tener nunca más de un emisor, y nada de crear eventos sin emisor, muy estúpido por mi parte.\r\n\r\nLuego hice que los objetos MVC principales se enviaran mensajes por pantalla, como si estuviesen hablando, llamado desde InformaT para asegurarme que no me había equivocado. Una vez terminado el mensaje, el modelo enviaba a la vista, la vista al controlador, y el controlador al modelo. Un StackOverflow muy gracioso por despistado xd.\r\n\r\nAhora a hacer la documentación de estas clases. Creo que no voy a hacer un JAVADOC de momento, y voy a recurrir al comentario.  \r\n\r\n### **<><> CHANGELOG DIA 21/12/2014 <><>**\r\nConsiderando las opciones gráficas de processing, lo mejor es hacer un híbrido, usando Processing para cargar XML y hacer operaciones cliente/servidor sobre la clase modelo, y usar swing para la clase Vista, no parece hacer conflicto alguno entre ambos así que va bien.\r\n\r\nAdemás, he redefinido la forma de conectar las clases principales al MVC, y he desligado la instancia principal de Processing, que reservaré exclusivamente para operar con modelos, así como la Vistaprincipal y ModeloPrincipal, encargados de iniciar la aplicación.\r\n\r\nAntes de avanzar en complejidad en la aplicación, tengo que hacer dos cosas; definir el javadoc de las clases que tengo, y establecer cómo voy a diseñar los eventos de Modelo, Vista y Controlador.\r\n\r\nPor fin presiento que la aplicación ha pasado la fase de scratch y tanto mi mentalidad como la aplicación está empezando a tomar forma.   \r\n\r\n### **<><> CHANGELOG DIA 20/12/2014 <><>**\r\nAl final he decidido que la conexión del MVC se resuma en una clase con elementos estáticos de las clases base de la aplicación, de modo que la búsqueda de modelos y vistas será de manera ascendente en la relación de composición y usando el identificador para localizar el elemento en cuestión.\r\n\r\nAdemás, finalmente me he decantado por Processing, siendo éste mucho más sencillo y flexible que Swing a la hora de diseñar interfaces, donde draw() es el hilo principal de la aplicación, el cual conecto a MVC para dar servicio a todos los elementos del MVC, de manera muy parecida al sistema que usé el primer día que subí este changelog.\r\n\r\nParece ser que, dado el grado de interés de mis compañeros, al final soy sólo yo el que va a hacer esta aplicación, por lo tanto espero que sea posible realizar esta aplicación con la misma calidad que esperaba cuando contaba con tres personas. \r\n\r\n### **<><> CHANGELOG DIA 17/12/2014 <><>**\r\nEl MVC, y por tanto lo que hay de aplicación, se ha rediseñado para incluir eventos caseros, más intutivos, y que son independientes de mi decisión final entre el uso de swing o processing. Este ya es el modelo definitivo. \r\n\r\nAdemás, he cascado los comentarios de documentación, que reservaré para el JAVADOC, y para separar atributos, constructores y métodos he incluido comentarios que los agrupan por funciones.\r\n\r\nAún desconozco si mis compañeros de clase van a participar, ya que no he recibido confirmación de ningún tipo, espero tener la respuesta mañana.\r\n\r\n### **<><> CHANGELOG DIA 12/12/2014 <><>**\r\nMediante una conversación sobre el diseño de las clases padre que van a controlar la aplicación, decidí remodelar la estructura de las mismas. Al igual que en el changelog anterior, no tengo desarrolladas más que la instancia de Processing que crea la aplicación y el SINGLETON que encapsula esa instancia para ser usada por el modelo MVC y sus clases hijas.\r\nUna vez más, favor de no valorar.\r\n\r\n### **<><> CHANGELOG DIA 3/12/2014 <><>**\r\nHe metido los diseños de la aplicación en /doc, y en /lib están las librerías de Processing.\r\n\r\nHe desarrollado en /src sólo Processing y ClaseProcessing para asegurar compatibilidad total con el modelo de aplicación MVC y su correspondiente desglose, únicamente para asegurar que podría desarrollar semejante pedazo de proyecto con las herramientas que propuse.\r\n\r\nFavor de no valorar, ya que ha sido hecho fuera de la etapa de desarrollo.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}